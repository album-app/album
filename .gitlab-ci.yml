# CI Routine for the album framework.


#----------------------------
# templates
#----------------------------

# Windows base template
#
# Downloads conda executable in <current_working_directory>\downloads if executable not present.
# Installs conda in >current_working_directory>\miniconda if conda not already installed.
# Runs conda initialization and configuration.
#
# NOTE: Apparently there is no output for commands split over several lines...
.windows_base_template_micromamba:
  before_script:
    - 'echo "We are in path: $pwd "'
    - 'if(-Not (Test-Path .\downloads)) {echo "Cache download not found! Creating..."; New-Item -ItemType Directory -Force -Path .\downloads} else { echo ".\downloads cache found! with content:"; Get-ChildItem -Path .\downloads}'
    - 'if(-Not (Test-Path .\.album)) {echo "Cache .album not found! Creating..."; New-Item -ItemType Directory -Force -Path .\.album} else { echo ".\.album cache found! with content:"; Get-ChildItem -Path .\.album}'
    - 'if(-Not (Test-Path .\micromamba)) {echo "Cache micromamba not found! Creating..."; New-Item -ItemType Directory -Force -Path .\micromamba} else { echo ".\micromamba cache found! with content:"; Get-ChildItem -Path .\micromamba}'
    - '$7ZIP_EXE=(Join-Path $env:ProgramFiles -ChildPath 7-Zip\7z.exe)'
    - '$7ZIP_INSTALLER=(Join-Path downloads -ChildPath 7z.exe)'
    - '$Env:MAMBA_ROOT_PREFIX=(Join-Path -Path (Get-Location) -ChildPath micromamba)'
    - '$Env:MAMBA_EXE=(Join-Path -Path (Get-Location) -ChildPath micromamba\Library\bin\micromamba.exe)'
    #- '$Env:USERPROFILE=$pwd'
    - '$Env:ALBUM_MICROMAMBA_PATH=(Join-Path -Path ($CI_PROJECT_DIR) -ChildPath micromamba\Library\bin\micromamba.exe)'
    - '$Env:micromamba=(Join-Path -Path ($CI_PROJECT_DIR) -ChildPath micromamba\Library\bin\micromamba.exe)'
    - '$oldProgressPreference = $progressPreference; $progressPreference = "SilentlyContinue";'
    - '[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12'                                                                                                                                                                                                                                                                                          # set Security download protocol to avoid https errors
    - 'if(-Not (Test-Path $7ZIP_EXE)) {if(-Not (Test-Path $7ZIP_INSTALLER)){Invoke-Webrequest -URI https://www.7-zip.org/a/7z2201-x64.exe -OutFile $7ZIP_INSTALLER}}'
    - 'if(-Not (Test-Path $7ZIP_EXE)) {Start-Process -FilePath $7ZIP_INSTALLER -Args "/S" -Verb RunAs -Wait}'
    - 'Invoke-Webrequest -URI https://gitlab.com/album-app/plugins/album-package/-/raw/micromamba_installer/micromamba-1.0.0_WINDOWS.tar.bz2?inline=false -OutFile micromamba.tar.bz2'
    - '& $7ZIP_EXE x micromamba.tar.bz2 -aoa'
    - '& $7ZIP_EXE x micromamba.tar -ttar -aoa -r Library\bin\micromamba.exe $("-o" + $Env:MAMBA_ROOT_PREFIX)'
    - '$progressPreference = $oldProgressPreference'
    - '.\micromamba\Library\bin\micromamba.exe create -y -n album -c conda-forge python=3.10'
    - '.\micromamba\Library\bin\micromamba.exe run -n album pip uninstall -y album'
    - '.\micromamba\Library\bin\micromamba.exe run -n album pip install -e .'
    - '.\micromamba\Library\bin\micromamba.exe run -n album pip install coverage'
    - '.\micromamba\Library\bin\micromamba.exe shell init -s powershell -p $Env:MAMBA_ROOT_PREFIX '

  tags:
    - windows
  variables:
    PIP_CACHE_DIR: $CI_PROJECT_DIR\.cache\pip
    ErrorActionPreference: Continue  # not working properly
  cache:
    key: one-key-to-rule-them-all-windows
    paths:
      - downloads
      - .cache\pip

.windows_base_template_conda_with_mamba:
  before_script:
    - 'echo "We are in path: $pwd "'
    - 'echo "conda URL:  $env:MINICONDA_URL "'
    - '$oldProgressPreference = $progressPreference; $progressPreference = "SilentlyContinue";'
    - 'if(-Not (Test-Path .\download)) {echo "Cache download not found! Creating..."; New-Item -ItemType Directory -Force -Path .\download} else { echo ".\download cache found! with content:"; Get-ChildItem -Path .\download}'                                                                                                                                                # create cache dir
    - '[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12'                                                                                                                                                                                                                                                                                          # set Security download protocol to avoid https errors
    - 'if(Test-Path .\download\miniconda_url.txt) {echo "found previous miniconda url information. Extracting information..."; $miniconda_cache_url = try {Get-Content -Path .\download\miniconda_url.txt -errorAction Stop} catch {echo "None"}; echo "Cached minconda executable: $miniconda_cache_url"} else { echo ".\download\miniconda_url.txt does not exist!"}'          # read url from cache
    - 'if($miniconda_cache_url -ne $env:MINICONDA_URL) {echo "Cached URL not equal to given URL. Removing executable..."; Remove-Item -Path .\download\miniconda3.exe -Force; $force_install = "true"; echo "Force installation triggered!"} else { echo "No force installation necessary!"}'                                                                                    # check if url changed - if yes, remove cache and mark conda reinstall
    - 'if(-Not (Test-Path .\download\miniconda3.exe)) {echo "Downloading miniconda executable..."; Invoke-WebRequest -UseBasicParsing -Uri $env:MINICONDA_URL -OutFile .\download\miniconda3.exe} else {echo "Executable found in .\download\miniconda3.exe. Reusing..."}'                                                                                                       # download the miniconda windows executable
    - 'echo $env:MINICONDA_URL | Out-File -FilePath .\download\miniconda_url.txt'                                                                                                                                                                                                                                                                                                # cache version information
    - 'Get-ChildItem -Path .\download'                                                                                                                                                                                                                                                                                                                                           # show download folder content
    - '$env:PATH += ";$pwd\miniconda\condabin"'     # set path information
    - '$env:PATH += ";$pwd\miniconda\Scripts"'
    - '$env:PATH += ";$pwd\miniconda\Library\bin"'
    - 'ls env:'
    - '$conda_available = try {Get-Command "Get-CondaEnvironment" -errorAction Stop} catch {$null}'                                                                                                                                                                                                                                                                              # check if conda cmnd already available
    - 'if($force_install -eq "true") {$conda_available = $null}'                                                                                                                                                                                                                                                                                                                 # mark conda reinstall
    - 'if($conda_available -eq $null) {echo "conda cmnd not available! Will install in $pwd\miniconda..."; Start-Process .\download\miniconda3.exe -argumentlist "/InstallationType=JustMe /S /D=$pwd\miniconda" -wait} else {echo "Skip downloading!..."}'
    - 'echo "Environment path: $env:PATH"'
    - 'conda init'
    - 'conda config --set notify_outdated_conda false'
    - 'conda install -y mamba -c conda-forge'
    - '$progressPreference = $oldProgressPreference'
  tags:
    - windows
    - mdc
  variables:
    PIP_CACHE_DIR: $CI_PROJECT_DIR\.cache\pip
    ErrorActionPreference: Continue  # not working properly
    MINICONDA_URL: https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe
  cache:
    key: one-key-to-rule-them-all-windows-conda-with-mamba
    paths:
      - .\download
      - .cache\pip


.windows_base_template_conda:
  before_script:
    - 'echo "We are in path: $pwd "'
    - 'echo "conda URL:  $env:MINICONDA_URL "'
    - '$oldProgressPreference = $progressPreference; $progressPreference = "SilentlyContinue";'
    - 'if(-Not (Test-Path .\download)) {echo "Cache download not found! Creating..."; New-Item -ItemType Directory -Force -Path .\download} else { echo ".\download cache found! with content:"; Get-ChildItem -Path .\download}'                                                                                                                                                # create cache dir
    - '[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12'                                                                                                                                                                                                                                                                                          # set Security download protocol to avoid https errors
    - 'if(Test-Path .\download\miniconda_url.txt) {echo "found previous miniconda url information. Extracting information..."; $miniconda_cache_url = try {Get-Content -Path .\download\miniconda_url.txt -errorAction Stop} catch {echo "None"}; echo "Cached minconda executable: $miniconda_cache_url"} else { echo ".\download\miniconda_url.txt does not exist!"}'          # read url from cache
    - 'if($miniconda_cache_url -ne $env:MINICONDA_URL) {echo "Cached URL not equal to given URL. Removing executable..."; Remove-Item -Path .\download\miniconda3.exe -Force; $force_install = "true"; echo "Force installation triggered!"} else { echo "No force installation necessary!"}'                                                                                    # check if url changed - if yes, remove cache and mark conda reinstall
    - 'if(-Not (Test-Path .\download\miniconda3.exe)) {echo "Downloading miniconda executable..."; Invoke-WebRequest -UseBasicParsing -Uri $env:MINICONDA_URL -OutFile .\download\miniconda3.exe} else {echo "Executable found in .\download\miniconda3.exe. Reusing..."}'                                                                                                       # download the miniconda windows executable
    - 'echo $env:MINICONDA_URL | Out-File -FilePath .\download\miniconda_url.txt'                                                                                                                                                                                                                                                                                                # cache version information
    - 'Get-ChildItem -Path .\download'                                                                                                                                                                                                                                                                                                                                           # show download folder content
    - '$env:PATH += ";$pwd\miniconda\condabin"'     # set path information
    - '$env:PATH += ";$pwd\miniconda\Scripts"'
    - '$env:PATH += ";$pwd\miniconda\Library\bin"'
    - '$conda_available = try {Get-Command "Get-CondaEnvironment" -errorAction Stop} catch {$null}'                                                                                                                                                                                                                                                                              # check if conda cmnd already available
    - 'if($force_install -eq "true") {$conda_available = $null}'                                                                                                                                                                                                                                                                                                                 # mark conda reinstall
    - 'if($conda_available -eq $null) {echo "conda cmnd not available! Will install in $pwd\miniconda..."; Start-Process .\download\miniconda3.exe -argumentlist "/InstallationType=JustMe /S /D=$pwd\miniconda" -wait} else {echo "Skip downloading!..."}'
    - 'echo "Environment path: $env:PATH"'
    - 'conda init'
    - 'conda config --set notify_outdated_conda false'
    - '$progressPreference = $oldProgressPreference'
  tags:
    - windows
  variables:
    PIP_CACHE_DIR: $CI_PROJECT_DIR\.cache\pip
    ErrorActionPreference: Continue  # not working properly
    MINICONDA_URL: https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe
  cache:
    key: one-key-to-rule-them-all-windows-conda
    paths:
      - .\download
      - .cache\pip


# Linux base template for running tests with micromamba as package manager
#
# Uses a docker image where micromamba will be installed.
# Creates an album environment.
#

.linux_base_template_micromamba:
  image: ubuntu:latest
  tags:
    - docker
    - vm
  before_script:
    - df -h
    - apt update
    - apt install git -y
    - apt install -y curl
    - apt install -y bzip2
    - export MAMBA_ROOT_PREFIX=$CI_PROJECT_DIR/micromamba
    - export ALBUM_MICROMAMBA_PATH=$CI_PROJECT_DIR/bin/micromamba
    - mkdir -p $CI_PROJECT_DIR/bin/
    - curl -Ls https://gitlab.com/album-app/plugins/album-package/-/raw/micromamba_installer/micromamba-1.0.0_LINUX_X86_64.tar.bz2?inline=false | tar -xvj -C $CI_PROJECT_DIR/bin/ --strip-components=1 bin/micromamba
    - eval "$($CI_PROJECT_DIR/bin/micromamba shell hook -s posix)"
    - micromamba create -y -n album -c conda-forge python=3.10
    - micromamba activate album
    - pip uninstall -y album
    - pip install -e .
    - python -V
    - python -c "import shutil; print(shutil.which(\"micromamba\"))"
    - pip install coverage
    - pip list
  variables:
    PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
    CONDA_ENV_NAME: album
    CONDA_PREFIX: /opt/conda
    PREFIX: $CONDA_PREFIX/envs/$CONDA_ENV_NAME
  cache:
    key: one-key-to-rule-them-all-linux
    paths:
      - ${CONDA_PREFIX}/pkgs/*.tar.bz2
      - ${CONDA_PREFIX}/pkgs/urls.txt
      - .cache/pip


# Linux base template for running test with conda as package manager
#
# Uses a docker image where conda is already installed.
# Creates an album environment.
#
.linux_base_template_conda:
  image: continuumio/miniconda3:latest
  tags:
    - docker
  before_script:
    - apt update
    - apt install git -y
    - python -V  # Print out python version for debugging
    - which python
    - conda create -y --channel=conda-forge -n album python=3.9 pip git
    - conda init bash
    - source ~/.bashrc
    - conda activate album
    - pip install -e .
    - which python
    - conda activate album
    - python -V
    - python -c "import shutil; print(shutil.which(\"conda\"))"
    - pip list
  variables:
    PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
    CONDA_ENV_NAME: album
    CONDA_PREFIX: /opt/conda
    PREFIX: $CONDA_PREFIX/envs/$CONDA_ENV_NAME
  cache:
    key: one-key-to-rule-them-all-linux
    paths:
      - ${CONDA_PREFIX}/pkgs/*.tar.bz2
      - ${CONDA_PREFIX}/pkgs/urls.txt
      - .cache/pip

# Linux base template for running test with conda with mamba as package manager
#
# Uses a docker image where conda is already installed.
# Creates an album environment.
#
.linux_base_template_conda_with_mamba:
  image: continuumio/miniconda3:latest
  tags:
    - docker
  before_script:
    - apt update
    - apt install git -y
    - python -V  # Print out python version for debugging
    - which python
    - conda create -y --channel=conda-forge -n album python=3.9 pip git
    - conda init bash
    - source ~/.bashrc
    - conda install -y mamba -c conda-forge
    - conda activate album
    - pip install -e .
    - which python
    - conda activate album
    - python -V
    - python -c "import shutil; print(shutil.which(\"mamba\"))"
    - pip list
  variables:
    PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
    CONDA_ENV_NAME: album
    CONDA_PREFIX: /opt/conda
    PREFIX: $CONDA_PREFIX/envs/$CONDA_ENV_NAME
  cache:
    key: one-key-to-rule-them-all-linux
    paths:
      - ${CONDA_PREFIX}/pkgs/*.tar.bz2
      - ${CONDA_PREFIX}/pkgs/urls.txt
      - .cache/pip



# Macos base template for running tests with micromamba as package manager
#
# Installs micromamba in a fresh tmp directory and activates it.
# DO NOT ALLOW JOBS TO BE RUN IN PARALLEL!
#
.macos_base_template_micromamba:
  tags:
    - macos
    - shell
  before_script:
    - echo "$(uname)"
    - sw_vers
    - tmpdir=$(mktemp -d /tmp/album-test.XXXXXX)
    - echo $tmpdir
    - echo $tmpdir > /tmp/tmpdir
    - export MAMBA_ROOT_PREFIX=$tmpdir/micromamba
    - export ALBUM_MICROMAMBA_PATH=$tmpdir/bin/micromamba
    - mkdir -p $tmpdir/bin/
    - curl -Ls https://gitlab.com/album-app/plugins/album-package/-/raw/micromamba_installer/micromamba-1.0.0_MACOS_X86_64.tar.bz2?inline=false | tar -xvj -C $tmpdir/bin/ --strip-components=1 bin/micromamba
    - eval "$($tmpdir/bin/micromamba shell hook -s posix)"
    - whereis micromamba
    - micromamba create -y -n album album -c conda-forge python=3.10
    - micromamba activate album
    - pip uninstall -y album
    - pip install --no-cache-dir https://gitlab.com/album-app/album/-/archive/$CI_COMMIT_REF_NAME/album-$CI_COMMIT_REF_NAME.zip
    - python -V
    - python -c "import shutil; print(shutil.which(\"micromamba\"))"
    - pip list
  after_script:
    - tmpdir=$(</tmp/tmpdir)
    - echo $tmpdir
    - rm -rf $tmpdir

# Macos base template for running tests with conda with mamba as package manager
#
# Installs miniconda in a fresh tmp directory and activates it.
# DO NOT ALLOW JOBS TO BE RUN IN PARALLEL!
#
.macos_base_template_conda:
  tags:
    - macos
    - shell
  before_script:
    - echo "$(uname)"
    - sw_vers
    - tmpdir=$(mktemp -d /tmp/album-test.XXXXXX)
    - echo $tmpdir
    - echo $tmpdir > /tmp/tmpdir
    - curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh --output $tmpdir/miniconda.sh
    - bash $tmpdir/miniconda.sh -b -p $tmpdir/miniconda
    - export PATH=$PATH:$tmpdir/miniconda/bin/
    - export ALBUM_CONDA_PATH=$tmpdir/miniconda/bin/conda
    - echo $PATH
    - source $tmpdir/miniconda/bin/activate
    - conda env list
    - conda create -y --channel=conda-forge -n album python=3.9 pip git
    - conda activate album
    - pip install --no-cache-dir https://gitlab.com/album-app/album/-/archive/$CI_COMMIT_REF_NAME/album-$CI_COMMIT_REF_NAME.zip
    - python -V
    - python -c "import shutil; print(shutil.which(\"conda\"))"
  after_script:
    - tmpdir=$(</tmp/tmpdir)
    - echo $tmpdir
    - rm -rf $tmpdir


# Macos base template for running tests with conda as package manager
#
# Installs miniconda in a fresh tmp directory and activates it.
# DO NOT ALLOW JOBS TO BE RUN IN PARALLEL!
#

.macos_base_template_conda_with_mamba:
  tags:
    - macos
    - shell
    - mdc
    - mitte
  before_script:
    - echo "$(uname)"
    - sw_vers
    - tmpdir=$(mktemp -d /tmp/album-test.XXXXXX)
    - echo $tmpdir
    - echo $tmpdir > /tmp/tmpdir
    - curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh --output $tmpdir/miniconda.sh
    - bash $tmpdir/miniconda.sh -b -p $tmpdir/miniconda
    - export PATH=$PATH:$tmpdir/miniconda/bin/
    - export ALBUM_CONDA_PATH=$tmpdir/miniconda/bin/conda
    - echo $PATH
    - source $tmpdir/miniconda/bin/activate
    - conda env list
    - conda install -y mamba -c conda-forge
    - export ALBUM_MAMBA_PATH=$tmpdir/miniconda/bin/mamba
    - conda create -y --channel=conda-forge -n album python=3.9 pip git
    - conda activate album
    - pip install --no-cache-dir https://gitlab.com/album-app/album/-/archive/$CI_COMMIT_REF_NAME/album-$CI_COMMIT_REF_NAME.zip
    - python -V
    - python -c "import shutil; print(shutil.which(\"mamba\"))"
  after_script:
    - tmpdir=$(</tmp/tmpdir)
    - echo $tmpdir
    - rm -rf $tmpdir


#----------------------------
# stages
#----------------------------

stages:
  - build
  - test
  - release-test
  - release
  - deploy
  - post-deploy


#----------------------------
# jobs
#----------------------------

rebuild_album_installer:
  stage: post-deploy
  trigger:
    project: album-app/plugins/album-package
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - setup.cfg

prepare release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - DeployRunner
    - DeployDocker
  script:
    - echo "preparing release"
    - VERSION=$(cat setup.cfg | grep "version=*" | awk '{split($0, s, " "); print s[3]}')
    - TAG=v$VERSION
    - echo "prepare to release version $VERSION with tag $TAG"
    - echo "VERSION=$VERSION" >> variables.env
    - echo "TAG=v$VERSION" >> variables.env
  artifacts:
    reports:
      dotenv: variables.env
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - setup.cfg

gitlab release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - DeployRunner
    - DeployDocker
  needs:
    - job: prepare release
      artifacts: true
  script:
    - echo "running release_job for version $VERSION and tag $TAG"
  rules:
      - if: $CI_COMMIT_TAG
        when: never
      - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        changes:
          - setup.cfg
  release:
    name: 'Release $TAG'
    description: 'Created using the release-cli'
    tag_name: '$TAG'
    ref: '$CI_COMMIT_SHA'


gitlab pypi deploy:
  image: python:latest
  stage: deploy
  tags:
    - DeployRunner
    - DeployDocker
  needs:
    - job: gitlab release
    - job: prepare release
      artifacts: true
  script:
    - echo "deploying gitlab pypi version $VERSION"
    - pip install twine
    - python setup.py sdist bdist_wheel
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  rules:
      - if: $CI_COMMIT_TAG
        when: never
      - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        changes:
          - setup.cfg

pypi deploy:
  image: python:latest
  stage: deploy
  tags:
    - DeployRunner
    - DeployDocker
  needs:
    - job: gitlab release
    - job: prepare release
      artifacts: true
  before_script:
    - echo "deploying pypi version $VERSION"
    - echo "using pypi deploy user $PYPI_DEPLOY_USER"
  script:
    - pip install twine
    - python setup.py sdist bdist_wheel
    - TWINE_PASSWORD=$PYPI_DEPLOY_TOKEN TWINE_USERNAME=$PYPI_DEPLOY_USER python -m twine upload --repository-url https://upload.pypi.org/legacy/  dist/*
  rules:
      - if: $CI_COMMIT_TAG
        when: never
      - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        changes:
          - setup.cfg


docker deploy:
  stage: deploy
  tags:
    - DeployRunner
    - DeployShell
  needs:
    - job: gitlab release
    - job: prepare release
      artifacts: true
    - job: pypi deploy
  before_script:
    - docker info
  script:
    - echo "deploying docker version $VERSION"
    - docker login -u "$DOCKER_DEPLOY_USER" -p "$DOCKER_DEPLOY_TOKEN" docker.io
    # building deploy tag
    - tag=$(echo $DOCKER_DEPLOY_USER/album:$VERSION)
    - echo "Building image with tag $tag"
    - docker build -t $tag .
    - docker push $tag
  rules:
      - if: $CI_COMMIT_TAG
        when: never
      - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        changes:
          - setup.cfg

# Linux Tests

cmdline linux:
  extends: .linux_base_template_micromamba
  stage: build
  script:
    # album commands
    - album -h
    - album run -h
    - album install -h
    - album deploy -h
    - album uninstall -h
    - album repl -h
    - album add-catalog -h
    - album remove-catalog -h
    # album catalog admin
    - album-catalog-admin -h

unit tests linux micromamba:
  extends: .linux_base_template_micromamba
  stage: test
  script:
    - coverage run --omit './test/*' -m unittest test/unit/run_all_unit_micromamba.py
    - coverage report
    - mv .coverage unit.coverage
  artifacts:
    paths:
      - unit.coverage

unit tests linux conda:
  extends: .linux_base_template_conda
  stage: test
  script:
    - python -m unittest test/unit/run_all_unit_conda.py

unit tests linux conda with mamba:
  extends: .linux_base_template_conda_with_mamba
  stage: test
  script:
    - python -m unittest test/unit/run_all_unit_conda_with_mamba.py

integration tests linux micromamba:
  extends: .linux_base_template_micromamba
  stage: test
  script:
    - coverage run --omit './test/*' -m unittest test/integration/run_all_integration_micromamba.py
    - coverage report
    - mv .coverage integration.coverage
  artifacts:
    paths:
      - integration.coverage

integration tests linux conda:
  extends: .linux_base_template_conda
  stage: test
  script:
    - python -m unittest test/integration/run_integration_conda.py

integration tests linux conda with mamba:
  extends: .linux_base_template_conda_with_mamba
  stage: test
  script:
    - python -m unittest test/integration/run_integration_conda.py

# MacOs Tests

unit tests macos micromamba:
  extends: .macos_base_template_micromamba
  stage: test
  script:
    - python -m unittest test/unit/run_all_unit_micromamba.py

unit tests macos conda:
  extends: .macos_base_template_conda
  stage: test
  script:
    - python -m unittest test/unit/run_all_unit_conda.py

unit tests macos conda with mamba:
  extends: .macos_base_template_conda_with_mamba
  stage: test
  script:
    - python -m unittest test/unit/run_all_unit_conda_with_mamba.py


integration tests macos micromamba:
  extends: .macos_base_template_micromamba
  stage: test
  script:
    - python -m unittest test/integration/run_all_integration_micromamba.py

integration tests macos conda:
  extends: .macos_base_template_conda
  stage: test
  script:
    - python -m unittest test/integration/run_integration_conda.py


integration tests macos conda with mamba:
  extends: .macos_base_template_conda_with_mamba
  stage: test
  script:
    - python -m unittest test/integration/run_integration_conda.py

# Windows Tests

unit tests windows micromamba:
  extends: .windows_base_template_micromamba
  stage: test
  script:
    - $cmnd = powershell.exe -command {micromamba activate album 2>&1 | Write-Host; coverage run --omit .\test\* -m unittest test\unit\run_all_unit_micromamba.py 2>&1 | Write-Host; if ($lastexitcode -ne 0) {exit(1)} else {coverage report 2>&1| Write-Host; coverage xml 2>&1| Write-Host; Rename-Item -Path ".coverage" -NewName "unit.coverage" 2>&1 | Write-Host; Rename-Item -Path "coverage.xml" -NewName "unit_coverage.xml" 2>&1 | Write-Host;} exit($lastexitcode)}
    - $cmnd_cleanup = powershell.exe -command {Remove-Item -path C:\Windows\System32\config\systemprofile\Documents -recurse 2>&1 | Write-Host; Remove-Item -path C:\Windows\System32\config\systemprofile\.conda -recurse 2>&1 | Write-Host; Remove-Item -path C:\Windows\System32\config\systemprofile\.mamba -recurse 2>&1 | Write-Host; Remove-Item -path C:\Windows\System32\config\systemprofile\.condarc -recurse 2>&1 | Write-Host; exit($lastexitcode)} # Used to cleanup after outbreaking micromamba
  artifacts:
    paths:
      - unit.coverage

unit tests windows conda:
  extends: .windows_base_template_conda
  stage: test
  script:
    - $cmnd = powershell.exe -command {conda create -y --channel=conda-forge -n album python=3.9 pip git 2>&1 | Write-Host; conda activate album 2>&1 | Write-Host; pip install --no-cache-dir https://gitlab.com/album-app/album/-/archive/$env:CI_COMMIT_REF_NAME/album-$env:CI_COMMIT_REF_NAME.zip 2>&1 | Write-Host; python -m unittest test\unit\run_all_unit_conda.py 2>&1 | Write-Host; exit($lastexitcode)}


unit tests windows conda with mamba:
  extends: .windows_base_template_conda_with_mamba
  stage: test
  script:
    - $cmnd = powershell.exe -command {conda create -y --channel=conda-forge -n album python=3.9 pip git 2>&1 | Write-Host; conda activate album 2>&1 | Write-Host; pip install --no-cache-dir https://gitlab.com/album-app/album/-/archive/$env:CI_COMMIT_REF_NAME/album-$env:CI_COMMIT_REF_NAME.zip 2>&1 | Write-Host; python -m unittest test\unit\run_all_unit_conda_with_mamba.py 2>&1 | Write-Host; exit($lastexitcode)}


integration tests windows conda with mamba:
  extends: .windows_base_template_conda_with_mamba
  stage: test
  script:
    - $cmnd = powershell.exe -command {conda create -y --channel=conda-forge -n album python=3.9 pip git 2>&1 | Write-Host; conda activate album 2>&1 | Write-Host; pip install --no-cache-dir https://gitlab.com/album-app/album/-/archive/$env:CI_COMMIT_REF_NAME/album-$env:CI_COMMIT_REF_NAME.zip 2>&1 | Write-Host; python -m unittest test\integration\run_integration_conda.py 2>&1 | Write-Host; exit($lastexitcode)}


integration tests windows micromamba:
  extends: .windows_base_template_micromamba
  stage: test
  script:
    - $cmnd = powershell.exe -command {micromamba activate album 2>&1 | Write-Host; coverage run --omit .\test\* -m unittest test\integration\run_all_integration_micromamba.py 2>&1 | Write-Host; if ($lastexitcode -ne 0) {exit(1)} else {coverage report 2>&1| Write-Host; coverage xml 2>&1| Write-Host; Rename-Item -Path ".coverage" -NewName "integration.coverage" 2>&1 | Write-Host; Rename-Item -Path "coverage.xml" -NewName "integration_coverage.xml" 2>&1 | Write-Host;} exit($lastexitcode)}
    - $cmnd_cleanup = powershell.exe -command {Remove-Item -path C:\Windows\System32\config\systemprofile\Documents -recurse 2>&1 | Write-Host; Remove-Item -path C:\Windows\System32\config\systemprofile\.conda -recurse 2>&1 | Write-Host; Remove-Item -path C:\Windows\System32\config\systemprofile\.mamba -recurse 2>&1 | Write-Host; Remove-Item -path C:\Windows\System32\config\systemprofile\.condarc -recurse 2>&1 | Write-Host; exit($lastexitcode)} # Used to cleanup after outbreaking micromamba
  artifacts:
    paths:
      - integration.coverage

integration tests windows conda:
  extends: .windows_base_template_conda
  stage: test
  script:
    - $cmnd = powershell.exe -command {conda create -y --channel=conda-forge -n album python=3.9 pip git 2>&1 | Write-Host; conda activate album 2>&1 | Write-Host; pip install --no-cache-dir https://gitlab.com/album-app/album/-/archive/$env:CI_COMMIT_REF_NAME/album-$env:CI_COMMIT_REF_NAME.zip 2>&1 | Write-Host; python -m unittest test\integration\run_integration_conda.py 2>&1 | Write-Host; exit($lastexitcode)}


release tests linux:
  extends: .linux_base_template_micromamba
  stage: release-test
  script:
    # install system requirements
    - apt-get -y update
    - apt-get install -y libgl1-mesa-dev
    # install templates in default catalog
    # - album install album:template-python:0.1.0-SNAPSHOT
    # - album install album:template-java:0.1.0-SNAPSHOT
    # - album install album:template-r:0.1.0-SNAPSHOT
    # - album install album:template-scijava:0.1.0-SNAPSHOT
    # - album install album:template-imagej:0.1.0-SNAPSHOT
    # - album install album:template-imagej2:0.1.0-SNAPSHOT
    # - album install album:template-bdv:0.1.0-SNAPSHOT
    # - album install album:template-napari:0.1.0-SNAPSHOT
    # - album install album:template-minimal:0.1.0-SNAPSHOT
    # run non-interactive templates
    # - album run album:template-minimal:0.1.0-SNAPSHOT
    # - album run album:template-python:0.1.0-SNAPSHOT
    # - album run album:template-java:0.1.0-SNAPSHOT
    # - album run album:template-r:0.1.0-SNAPSHOT
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - setup.cfg

# Create combined coverage reports

create combined coverage for linux:
  extends: .linux_base_template_micromamba
  stage: test
  dependencies:
    - unit tests linux micromamba
    - integration tests linux micromamba
  needs:
    - unit tests linux micromamba
    - integration tests linux micromamba
  script:
    - coverage combine unit.coverage integration.coverage
    - coverage report
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

create combined coverage for windows:
  extends: .windows_base_template_micromamba
  stage: test
  dependencies:
    - unit tests windows micromamba
    - integration tests windows micromamba
  needs:
    - unit tests windows micromamba
    - integration tests windows micromamba
  script:
    - $cmnd = powershell.exe -command {micromamba activate album 2>&1 | Write-Host; coverage combine unit.coverage integration.coverage 2>&1 | Write-Host; coverage report 2>&1| Write-Host; coverage xml 2>&1| Write-Host; exit($lastexitcode)}
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml